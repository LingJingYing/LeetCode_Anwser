// 归并两个数组，再直接找中位数
static auto xxx=[]{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    return nullptr;
}();
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
	int l1 = 0, l2 = 0, r1 = nums1.size() - 1, r2 = nums2.size() - 1, count = 0;
	double answer;
	vector<int> nums(nums1.size() + nums2.size(), 0);
	while(l1 <= r1 && l2 <= r2)
	{
		nums[count++] = nums1[l1]<nums2[l2] ? nums1[l1++] : nums2[l2++];
		
	}
	while ((l1 == r1+1 ) && l2 <= r2)
	{
		nums[count++] = nums2[l2++];
		
	}
	while ((l2 == r2+1 ) && l1 <= r1)
	{
		nums[count++] = nums1[l1++];
		
	}
	int size = nums.size();
        
	//if (size % 2 == 1) answer = nums[size / 2 ];
	//if (size % 2 == 0) answer = ((double)nums[size / 2-1] + (double)nums[size / 2 ]) / 2.0;
        return size%2?nums[size / 2 ]:((double)nums[size / 2-1] + (double)nums[size / 2 ]) / 2.0;
    }
};

////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param A: An integer array.
     * @param B: An integer array.
     * @return: a double whose format is *.5 or *.0
     */
    double findMedianSortedArrays(vector<int> A, vector<int> B) {
        
        if (A.size() > B.size()) return findMedianSortedArrays(B,A);
        int m = A.size(),n = B.size();
        int imin = 0,imax = m,half_len = (m + n + 1) / 2,i,j,max_of_left,min_of_right;
        while (imin <= imax) {
            i = (imin + imax) / 2;
            j = half_len - i;
            if (i < m && j > 0 && B[j - 1] > A[i]) imin = i + 1;
            else if (i > 0 && j < n && B[j] < A[i - 1]) imax = i - 1;
            else {
                if (i == 0) max_of_left = B[j - 1];
                else if (j == 0) max_of_left = A[i - 1];
                else max_of_left = max(A[i - 1],B[j - 1]);
                break;
            }
        }
        if ((m + n) % 2 == 1) return max_of_left;
        if (i == m) min_of_right = B[j];
        else if (j == n) min_of_right = A[i];
        else min_of_right = min(A[i],B[j]);
        return (max_of_left + min_of_right) / 2.0;
    }
};
