static const auto _ = []()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    return nullptr;
}();
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int,int> M;
        map<int,int>::iterator it;
        int num = nums.size();
        for(int i = 0;i<num;i++){
            it = M.find(nums[i]);
            if(it == M.end()) M.insert(map<int,int>::value_type (nums[i],1));
            else it->second++;
            if((it->second)>num/2)return it->first;
        }
        return nums[0];
        
    }
};

/*
首先是有那个强大的前提存在，一定会有一个出现超过半数的数字存在，那么如果计数器减到0了话，
说明目前不是候选者数字的个数已经跟候选者的出现个数相同了，那么这个候选者已经很weak，
不一定能出现超过半数，我们选择更换当前的候选者。那有可能你会有疑问，那万一后面又大量的出现了之前的候选者怎么办，
不需要担心，如果之前的候选者在后面大量出现的话，其又会重新变为候选者，直到最终验证成为正确的众数
*/
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int res = 0, cnt = 0;
        for (int num : nums) {
            if (cnt == 0) {res = num; ++cnt;}
            else (num == res) ? ++cnt : --cnt;
        }
        return res;
    }
};

//出现次数最多的那个数，它的每一位出现次数也是最多的

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int res = 0, n = nums.size();
        for (int i = 0; i < 32; ++i) {
            int ones = 0, zeros = 0;
            for (int num : nums) {
                if (ones > n / 2 || zeros > n / 2) break;
                if ((num & (1 << i)) != 0) ++ones;
                else ++zeros;
            }
            if (ones > zeros) res |= (1 << i);
        }
        return res;
    }
};
