/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

// 使用额外空间
static const auto __ = []() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	return nullptr;
}();
class Solution {
public:
    bool isPalindrome(ListNode* head) 
    {
        vector<int> vals;
        while(head)
        {
            vals.push_back(head->val);
            head = head->next;
        }
        for(int i = 0; i<vals.size()/2;++i )if(vals[i]!=vals[vals.size()-1-i])return 0;
        return 1;
    }
};

// 不使用额外空间
class Solution {
public:
  bool isPalindrome(ListNode* head) {
    if (head == NULL) return true;
    ListNode* mid = findMid(head);
    mid = reverseList(mid->next); // 只需要比较一半，所以后半部分直接翻转，虽然破坏原有链表，但无关紧要
    while (head && mid) {
      if (head->val != mid->val) return false;
      head = head->next;
      mid = mid->next;
    }
    return true;
  }
    
  ListNode* findMid(ListNode* head) {
    ListNode* slow = head;        // slow走一步到head
    ListNode* fast = slow->next;  // fast走两步到head->next
    while (fast && fast->next) {  // fast 是 slow 速度的两倍，所以 fast 到达底部时， slow正好在中间位置
      slow = slow->next;
      fast = fast->next->next;
    }
    return slow;
  }
    
  ListNode* reverseList(ListNode* head) {
    ListNode* pre = NULL;
    while (head) {
      ListNode* tmp = head->next;
      head->next = pre;
      pre = head;
      head = tmp;
    }
    return pre;
  }

};
