static int xx = []() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    return 0;
}();

class Solution {
public:
    int firstUniqChar(string s) {
        vector<int> t(26, -2);
        for (int i = 0; i < s.length(); i++) {
            int pos = s[i] - 'a';
            if (t[pos] == -2) { //头一次出现，记录下标
                t[pos] = i;
            } else {            //不是第一次出现，改为 -1
                t[pos] = -1;
            }
        }
        int ret = -1;
        for (int i = 0; i < 26; i++) {
            if (t[i] > -1) {
                if (ret == -1 || ret > t[i]) { // 只出现一次且下标最小的
                    ret = t[i];
                }
            }
        }
        return ret;
    }
};

// 用map查找
class Solution {
public:
    int firstUniqChar(string s) {
        if(s.empty())
            return -1;
        unordered_map<char, int> um;
        for(char c : s)
        {
            unordered_map<char, int>::iterator it = um.find(c);
            if(it != um.end())
                it->second++;
            else
                um[c] = 1;
        }
        int pos = 0;
        for(char c : s)
        {
            unordered_map<char, int>::iterator it = um.find(c);
            if(it->second == 1)
                break;
            pos++;
        }
        if(pos == s.size())
            return -1;
        return pos;
    }
};
